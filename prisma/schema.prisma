// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username       String  @unique // Unique constraint
  name           String? @db.VarChar(35) // Limit display name to 35 characters
  email          String  @unique // Unique constraint
  password       String
  private        Boolean @default(false) // Default value
  profilePicture String  @default("https://bango-twitter-bucket.s3.amazonaws.com/Profile-PNG-File.png")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts     Post[]
  follows   Follow[]   @relation(name: "follows")
  followers Follow[]   @relation(name: "followers")
  reactions Reaction[]
  messages  Message[]
  Chatroom  Chatroom[]
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId     String     @db.Uuid // Foreign Key
  content      String     @db.VarChar(240) // Limit the content to 240 characters
  images       String[]
  reactions    Reaction[]
  parentPostId String?    @db.Uuid // Optional value
  comments     Post[]     @relation("Comments")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  author     User  @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
  parentPost Post? @relation("Comments", fields: [parentPostId], references: [id])
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  userId       String       @db.Uuid
  reactionType ReactionType
  postId       String       @db.Uuid

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // One to many
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) // One to many
}

enum ReactionType {
  LIKE
  RETWEET
}

model Message {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  senderId   String @db.Uuid
  content    String @db.VarChar(240)
  chatroomId String @db.Uuid

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  sender   User     @relation(fields: [senderId], references: [id], onDelete: Cascade) // One to many
  chatroom Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade) // One to many
}

model Chatroom {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  users User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  messages Message[]
}
